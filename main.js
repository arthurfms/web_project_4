!function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._selector=e,this._popup=document.querySelector(".".concat(e)),this._closeButton=this._popup.querySelector(".".concat(e,"__close-button"))}var n,r;return n=t,(r=[{key:"open",value:function(){this._popup.classList.add("".concat(this._selector,"_opened"))}},{key:"close",value:function(){this._popup.classList.remove("".concat(this._selector,"_opened"))}},{key:"_handleEscClose",value:function(e){"Escape"==e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;document.addEventListener("keyup",(function(t){e._handleEscClose(t)})),this._popup.addEventListener("click",(function(t){t.target.classList.contains("".concat(e._selector,"_opened"))&&e.close()})),this._closeButton.addEventListener("click",(function(){e.close()}))}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formElement=n,this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass}var t,r;return t=e,(r=[{key:"setEventListeners",value:function(){var e=this;this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._toggleSubmitButton(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleSubmitButton()}))}))}},{key:"_toggleSubmitButton",value:function(){this._hasInvalidInput(this._inputList)?this._buttonElement.classList.add(this._inactiveButtonClass):this._buttonElement.classList.remove(this._inactiveButtonClass)}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_showInputError",value:function(e,t){var n=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),n.textContent=t,n.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(){return s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=u(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},s.apply(this,arguments)}function u(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=l(e)););return e}function c(e,t){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},c(e,t)}function a(e,t){if(t&&("object"===o(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&c(e,t)}(f,e);var t,n,r,o,u=(r=f,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(r);if(o){var n=l(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return a(this,e)});function f(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f),(t=u.call(this,e))._image=t._popup.querySelector(".image-popup__image"),t._subtitle=t._popup.querySelector(".image-popup__subtitle"),t}return t=f,(n=[{key:"open",value:function(e,t){this._image.src=e,this._image.alt=t,this._subtitle.textContent=t,s(l(f.prototype),"open",this).call(this)}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),f}(t),p=document.querySelector(".info__edit-button"),d=document.querySelector(".add-button"),h=new f("image-popup"),_=document.querySelector(".info__name"),y=document.querySelector(".info__job"),b=document.querySelector("#name-input"),v=document.querySelector("#job-input"),m=(document.querySelector(".popup_user"),document.querySelector(".popup_card"),{formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__submit",inactiveButtonClass:"form__submit_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__input_type_error_active"});function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,t){return E=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},E(e,t)}function w(e,t){if(t&&("object"===k(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function C(e){return C=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},C(e)}var S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&E(e,t)}(u,e);var t,n,o,i,s=(o=u,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=C(o);if(i){var n=C(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return w(this,e)});function u(e){var t,n=e.selector,r=e.sending;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=s.call(this,n))._form=document.querySelector(".".concat(t._selector)).querySelector(".form"),t._inputs={},t._closeButton=document.querySelector(".".concat(t._selector)).querySelector(".popup__close-button"),t._sendButton=t._form.querySelector(".form__submit"),t._sending=r,t}return t=u,(n=[{key:"_getInputValues",value:function(){var e=this;return this._inputsList.forEach((function(t){var n=t.id;e._inputs["".concat(n)]=t.value})),this._inputs}},{key:"_cleanInputsValues",value:function(){this._inputsList.forEach((function(e){e.value=""}))}},{key:"open",value:function(){this._inputsList=this._form.querySelectorAll(".form__input"),new r(m,this._form).setEventListeners(),this._popup.classList.add("popup_opened")}},{key:"close",value:function(){document.removeEventListener("keyup",this.boundHandleEscClose),this._popup.removeEventListener("click",this.boundHandleClickOut),this._sendButton.removeEventListener("click",this.boundAdding),this._closeButton.removeEventListener("click",this.boundClose),this._sendButton.removeEventListener("click",this.boundAdding),this._popup.classList.remove("popup_opened"),this._cleanInputsValues()}},{key:"_adding",value:function(e){e.preventDefault(),this._sending()}},{key:"_handleEnter",value:function(e){"Enter"==e.key&&this._sendButton.classList.contains("form__submit_inactive")&&e.preventDefault()}},{key:"_handleClickOut",value:function(e){e.target.classList.contains("popup_opened")&&this.close()}},{key:"setEventListeners",value:function(){this.boundClose=this.close.bind(this),this.boundHandleEscClose=this._handleEscClose.bind(this),this.boundHandleClickOut=this._handleClickOut.bind(this),this.boundAdding=this._adding.bind(this),this.boundHandleEnter=this._handleEnter.bind(this),document.addEventListener("keyup",this.boundHandleEscClose),this._popup.addEventListener("click",this.boundHandleClickOut),this._closeButton.addEventListener("click",this.boundClose),this._sendButton.addEventListener("click",this.boundAdding),document.addEventListener("keydown",this.boundHandleEnter)}}])&&g(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(t);function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O=function(){function e(t,n,r){var o=r.handleCardClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._title=t.name,this._image=t.link,this._cardSelector=n,this._isLiked=!1,this.handleCardClick=o}var t,n;return t=e,(n=[{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._setEventListeners(),this._setImage(),this._setTitle(),this._element}},{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}},{key:"_setImage",value:function(){var e=this._element.querySelector(".card__image");e.src=this._image,e.alt=this._title}},{key:"_setTitle",value:function(){this._element.querySelector(".card__title").textContent=this._title}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".card__like-button").addEventListener("click",(function(){e._handleLike()})),this._element.querySelector(".card__trash-icon").addEventListener("click",(function(){e._deleteCard()})),this._element.querySelector(".card__image").addEventListener("click",(function(){h.open(e._image,e._title),h.setEventListeners()}))}},{key:"_handleLike",value:function(){this._element.querySelector(".card__like-button").classList.toggle("card__like-button_active"),this._isLiked=!this._isLiked}},{key:"_deleteCard",value:function(){this._element.remove()}}])&&L(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var q=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(){var e=this;this._items.forEach((function(t){e._renderer(t)}))}}])&&j(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var I=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=t.name,this._userJob=t.job}var t,n;return t=e,n=[{key:"updateUserData",value:function(e){this._userName=e.name,this._userJob=e.job,this._setUserInfo()}},{key:"getUserInfo",value:function(){return{name:this._userName,job:this._userJob}}},{key:"_setUserInfo",value:function(){var e=this.getUserInfo(),t=document.querySelector(".info__name"),n=document.querySelector(".info__job");t.textContent=e.name,n.textContent=e.job,console.log("user set")}}],n&&P(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var U=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.baseUrl=t.baseUrl,this.request=t.request}var t,n;return t=e,(n=[{key:"getInitialCards",value:function(){fetch(this.baseUrl,this.request).then((function(e){return e.json()})).then((function(e){var t=new q({items:e,renderer:function(e){var n=new O(e,"#card__template",{handleCardClick:function(){n.addEventListener("click",(function(){h.open(n._link,n._title)}))}});t.addItem(n.generateCard())}},".elements");t.renderItems()}))}},{key:"getUser",value:function(){fetch(this.baseUrl,this.request).then((function(e){return e.json()})).then((function(e){return new I(e),_.textContent=e.name,y.textContent=e.about,console.log(e)}))}},{key:"updateUser",value:function(){fetch(this.baseUrl,this.request).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).then((function(e){return console.log(e)})).catch((function(e){console.log(e)}))}}])&&B(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),T=new U({baseUrl:"https://around.nomoreparties.co/v1/web_ptbr_cohort_01/users/me",request:{headers:{authorization:"4ffa3b89-8ef6-47e0-b012-e4475ed39e9b"}}}),x={name:_.textContent,job:y.textContent};new I(x),p.addEventListener("click",(function(){var e=new S({selector:"popup_user",sending:function(){var t=e._getInputValues();new U({baseUrl:"https://around.nomoreparties.co/v1/web_ptbr_cohort_01/users/me",request:{method:"PATCH",headers:{authorization:"4ffa3b89-8ef6-47e0-b012-e4475ed39e9b","Content-Type":"application/json"},body:JSON.stringify({name:t["name-input"],about:t["job-input"]})}}).updateUser(),e.close(),T.getUser()}});b.value=_.textContent,v.value=y.textContent,e.open(),e.setEventListeners()})),d.addEventListener("click",(function(){var e=new S({selector:"popup_card",sending:function(){var t=e._getInputValues();cards.push({name:t["title-input"],link:t["image-input"]});var n=new O(cards[cards.length-1],"#card__template",{handleCardClick:function(){n.addEventListener("click",(function(){h.open(n._link,n._title)}))}}),r=n.generateCard();cardSection.addItem(r),e.close()}});e.open(),e.setEventListeners()})),fetch("https://around.nomoreparties.co/v1/web_ptbr_cohort_01/users/me",{headers:{authorization:"4ffa3b89-8ef6-47e0-b012-e4475ed39e9b"}}).then((function(e){return e.json()})).then((function(e){return e})),new U({baseUrl:"https://around.nomoreparties.co/v1/web_ptbr_cohort_01/cards",request:{headers:{authorization:"4ffa3b89-8ef6-47e0-b012-e4475ed39e9b"}}}).getInitialCards(),new U({baseUrl:"https://around.nomoreparties.co/v1/web_ptbr_cohort_01/users/me",request:{headers:{authorization:"4ffa3b89-8ef6-47e0-b012-e4475ed39e9b"}}}).getUser()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,